
----------------------------------------------
VER1_ALL:  (13 12 2019) 
----------------------------------------------
--am un mini limbaj de construit mai jos pentru
  inceperea constructiei interpretorului/
  executorului cpu
----------------------------------------------
MOV R111 , R2 #instr de incarc reg in alt reg
MOV R1,0x7D #alt is:MOV R1,2DH, supports 8bit hexa value,no more

#comment linie noua_test
JNZ 0xE300 
JNZ to_label_jnz #pentru toate jp-urile voi creea label-uri
JPZ 0x0001 
JPZ to_label_jpz
eticheta_label_1:
JMP 0x1111
JMP _to_label #label in jump(fara :),MUST implem in all jumps
JNC 0x1000
JNC to_label_jnc
JPC 0x1001
JPC to_label_jpc
JNN 0x1002
JNN to_label_jnn
JPN 0x1003
JPN to_label_jpn
JNO 0x1004
JNO to_label_jno
JPO 0x1005
JPO to_label_jpo
_to_label:
STR R3, R4, R5
STR R6 , 0xff 
LDR R7, R8, R9
LDR R10, 0x55
ADD R11, R12
ADD R13, 0xA
ADC R14, R0
SUB R0, R1
SUB R0, 0x6
SBC R1, R2
AND R0, R1
ORR R0,R1
XOR R0,R1
CMP R10,R11
INV R13
SHL R13
SHR R13
ROL R13
ROR R13
PSH R7
POP R7
CLZ
CLC
CLN
NOP   
HALT 







----------------------------------------------
VER1_ALL_IMPLEMENTED:  (02 01 2020) 
----------------------------------------------
Note/Observatii:
  -PT LIMBAJ FULL , vezi VER1_ALL din acest fisier
  -INTOTDEAUNA pune instr HALT la sf lb de asamblare
    ca sa opreasca executia  
  -#implementata - instructiune total validata si 
    implementata in lbaj
--------------------------------------
#toate implementate:
MOV R2,0x7D        #implementata
MOV R11 , R2       #implementata
JMP 0x3            #implementata
_lbl_JMP_0x3_ant:  #implementata
JMP _to_label_MY   #implementata
_to_label_MY:      #implementata

JNZ 0x07           #implementata
JNZ jnz_label      #implementata
jnz_label:         #implementata
JPZ 0x0A           #implementata
JPZ jpz_label      #implementata
jpz_label:         #implementata
JNC 0x0D           #implementata
JNC jnc_label      #implementata
jnc_label:         #implementata
JPC 0x10           #implementata
JPC jpc_label      #implementata
jpc_label:         #implementata
JNN 0x13           #implementata
JNN jnn_label      #implementata
jnn_label:         #implementata
JPN 0x16           #implementata
JPN jpn_label      #implementata
jpn_label:         #implementata
JNO 0x19           #implementata
JNO jno_label      #implementata
jno_label:         #implementata
JPO 0x1C           #implementata
JPO jpo_label      #implementata
jpo_label:         #implementata
##STR si LDR: 
MOV R3, 0x03       #implementata-deja
MOV R4, 0x00       #implementata-deja
MOV R5, 0xf5       #implementata-deja
STR R3, R4, R5     #implementata
STR R3, 0x00ff     #implementata
LDR R10, R4, R5    #implementata
LDR R12, 0x00f5    #implementata
##ADD,ADC,SUB,SBC:
ADD R8, R12        #implementata
ADD R13, 0x0A      #implementata
ADC R14, R0        #implementata
MOV R0,0x7         #implementata_deja
MOV R1,0x1         #implementata_deja
SUB R0, R1         #implementata
SUB R0, 0x06       #implementata
SBC R2, R1         #implementata
AND R2, R5         #implementata
ORR R0,R1          #implementata
XOR R0,R1          #implementata
CMP R10,R11        #implementata
INV R13            #implementata
SHL R13            #implementata
SHR R13            #implementata
ROL R13            #implementata
ROR R13            #implementata
CLZ                #implementata
CLC                #implementata
CLN                #implementata

#PSH R4             #nu_mai_implementez_NOT_NEEDED
#POP R4             #nu_mai_implementez_NOT_NEEDED
#CLO                #nu_mai_implementez_NOT_NEEDED

NOP                #implementata
NOP                #implementata
HALT               #implementata
------------------------
END VER1_ALL_IMPLEMENTED
------------------------






----------------------------------------------
VERn: (DD.MM.YYYY) 
----------------------------------------------
--aceasta este o nota in acest text(model exemplu)
--format de cod sursa 










----------------------------------------------
VER2: (04.02.2020) 
----------------------------------------------
--Pune cod de la birleanu aici ca sa incepi 
  construirea primului Predictor
--Modeleaza niste algoritmi de test pentru 
  predictie salturi(ia-l pe a lui Birleanu
  si mai cerei altii)
--incepe aici:
#cod exemplu Birleanu ex1_si_in_caiet
#calcul suma vector
#30 elemente de cate 1 octet(byte)
#se presupune ca memoria de date are elemente pe liniile 0->30
#plasate in memorie de la 00h(0x0000)
#A MERS CODUL IN APP MEA - ieeei
#vezi codul ADD(carry flag imi reseteaza suma) daca e bun
#start:
MOV R1, 0x00 #adresa high
MOV R2, 0x00 #adresa low
MOV R0, 0x00 #suma 
MOV R3, 0x1E #nr elemente(30)
loop:
LDR R4, R1,R2 #R4 <- Mem 0xR1R2
ADD R2, 0x01
ADD R0, R4    #R0 += R4
SUB R3, 0x01  #R3--
MOV R5, 0x00
CMP R3, R5
JNZ loop
#stochez rezultat la adr 0x0080
MOV R2, 0x80
STR R0, R1,R2
HALT










----------------------------------------------
VER3: (04.02.2020) 
----------------------------------------------
--Pune cod de la birleanu aici ca sa incepi 
  construirea primului Predictor
--incepe aici:
#cod exemplu Birleanu NECOMENTAT ex1_si_in_caiet
#calcul suma vector
#30 elemente de cate 1 octet(byte)
#se presupune ca memoria de date are elemente pe liniile 0->30(le pun eu cu functii de test)
#plasate in memorie de la 00h(0x0000)
#MERGE IN APP MEA - ieee
#start:
MOV R1, 0x00 
MOV R2, 0x00 
MOV R0, 0x00 
MOV R3, 0x1E 
loop:
LDR R4, R1,R2 
ADD R2, 0x01
ADD R0, R4    
SUB R3, 0x01  
MOV R5, 0x00
CMP R3, R5
JNZ loop
#stochez rezultat la adr 0x0080
MOV R2, 0x80
STR R0, R1,R2
HALT








----------------------------------------------
VER4: (11.02.2020) 
----------------------------------------------
--Pune cod de la birleanu aici ca sa incepi 
  construirea primului Predictor
--adaugat  al2 lea jp pentru test predictie dinamica
--incepe aici:
#cod exemplu Birleanu NECOMENTAT ex1_si_in_caiet
#calcul suma vector
#30 elemente de cate 1 octet(byte)
#se presupune ca memoria de date are elemente pe liniile 0->30(le pun eu cu functii de test)
#plasate in memorie de la 00h(0x0000)
#MERGE IN APP MEA - ieee
#start:
MOV R1, 0x00 
MOV R2, 0x00 
MOV R0, 0x00 
MOV R3, 0x1E 
loop:
LDR R4, R1,R2 
ADD R2, 0x01
ADD R0, R4    
SUB R3, 0x01  
MOV R5, 0x00
CMP R3, R5
JNZ loop
#stochez rezultat la adr 0x0080
MOV R2, 0x80
STR R0, R1,R2
#pana aici cod suma vector de la Birleanu -
#in continuare adaugat inca un JP pentru testare predictie dinamica pe branch(urm 3 instructiuni)
#pun tot un JP JNZ deocamdata(dar in viitor poate fi orice alt jp pentru test)
CLZ
JNZ to_label
to_label:
HALT





----------------------------------------------
VER5: (26.03.2020) 
----------------------------------------------
#testare instr CMP(pentru testare cei 4 algo de test) 
#CMP destination, source
#
#cum ar trebui sa functioneze:
#(am implementat aceasta functionare in lbajul cpuBP app mea)
#CMP dst , src
#1. dst = src => ZF=1, CF=0 (ZF = zero flag, CF = carry flag)
#2. dst < src => ZF=0, CF=1
#3. dst > src => ZF=0, CF=0
#
#vazut acest mod functionare pe :
#https://reverseengineering.stackexchange.com/questions/20838/how-the-cmp-instruction-uses-condition-flags
#
#testare app mea:
#
#test1 dst = src
MOV R0, 0x00
MOV R1, 0x00 
CMP R0, R1
JPZ lbl
NOP
lbl:
NOP
NOP
JNC lbl2
NOP
lbl2:
NOP
NOP
HALT
#works
#
#test2 dst < src
MOV R0, 0x00
MOV R1, 0x01 
CMP R0, R1
JNZ lbl
NOP
lbl:
NOP
NOP
JPC lbl2
NOP
lbl2:
NOP
NOP
HALT
#works
#
#test3 dst > src
MOV R0, 0x02
MOV R1, 0x01 
CMP R0, R1
JNZ lbl
NOP
lbl:
NOP
NOP
JNC lbl2
NOP
lbl2:
NOP
NOP
HALT
#works






----------------------------------------------
VER6: (26.03.2020) 
----------------------------------------------
#algo calcul max din vector 10 elemente
#scris de mine
#prototip:
#start:
#
MOV R1, 0x01 #ctr i=1
MOV R2, 0x00 #high mem date addr
MOV R3, 0x00 #low mem date addr
MOV R5, 0x0A #nr max elemente vector
LDR R0, R2, R3 #max = v[0]

loop1:
#
#insidefor-if
INC R3 #preia urm elem vector
LDR R4, R2, R3 # R4 <- v[i]
CMP R0, R4  #if max < v[i]
JNC outOfIf
MOV R0, R4 #max = v[i]
outOfIf:
NOP
#endinsidefor-if
#
INC R1 #i++
CMP R1, R5
JNZ loop1

MOV R3, 0x80
STR R0, R2,R3 #stocare max la addr mem 0x0080
HALT






----------------------------------------------
VER7: (26.03.2020) 
----------------------------------------------
#algo calcul max din vector 10 elemente
#scris de mine, working but have to check if correct
#start:
MOV R1, 0x01 #ctr i=1
MOV R2, 0x00 #high mem date addr
MOV R3, 0x00 #low mem date addr
MOV R5, 0x0A #nr max elemente vector
LDR R0, R2, R3 #max = v[0]

loop1:
#
#insidefor-if
ADD R3,0x01 #preia urm elem vector -INC R3
LDR R4, R2, R3 # R4 <- v[i]
CMP R0, R4  #if max < v[i]
JNC out_of_if
MOV R0, R4 #max = v[i]
out_of_if:
NOP
#endinsidefor-if
#
ADD R1,0x01 #i++(INC R1)
CMP R1, R5
JNZ loop1

MOV R3, 0x80
STR R0, R2,R3 #stocare max la addr mem 0x0080
HALT





----------------------------------------------
VER8: (26.03.2020) 
----------------------------------------------
#algo calcul max din vector 10 elemente
#scris de mine, working but have to check if correct
#start:
MOV R1, 0x01 #ctr i=1
MOV R2, 0x00 #high mem date addr
MOV R3, 0x00 #low mem date addr
MOV R5, 0x0A #nr max elemente vector(primele 10)
LDR R0, R2, R3 #max = v[0]

loop1:
#
#insidefor-if
ADD R3,0x01 #preia urm elem vector -INC R3
LDR R4, R2, R3 # R4 <- v[i]
CMP R0, R4  #if max < v[i]
JNC out_of_if
MOV R0, R4 #max = v[i]
out_of_if:
NOP
#endinsidefor-if
#
ADD R1,0x01 #i++(INC R1)
CMP R1, R5
JNZ loop1

MOV R3, 0x80
STR R0, R2,R3 #stocare max la addr mem 0x0080
HALT





----------------------------------------------
VER9: (26.03.2020) 
----------------------------------------------
#algo calcul max din vector 10 elemente
#scris de mine, working !!!
#MERGE, YEEEAA
#start:
MOV R1, 0x01 #ctr i=1
MOV R2, 0x00 #high mem date addr
MOV R3, 0x00 #low mem date addr
MOV R5, 0x0A #nr max elemente vector(primele 10)
LDR R0, R2, R3 #max = v[0]

loop1:
CLZ  #resetare flaguri dupa fiecare if, for 
CLC
#
#insidefor-if
ADD R3,0x01 #preia urm elem vector -INC R3
LDR R4, R2, R3 # R4 <- v[i]
CMP R0, R4  #if max < v[i]
JNC out_of_if
MOV R0, R4 #max = v[i]
CLZ 
CLC
out_of_if:
NOP
CLZ
CLC
#endinsidefor-if
#
ADD R1,0x01 #i++(INC R1)
CMP R1, R5
JNZ loop1

CLZ 
CLC
MOV R3, 0x80
STR R0, R2,R3 #stocare max la addr mem 0x0080
HALT






----------------------------------------------
VER10: (28.03.2020) 
----------------------------------------------
#algo sortare interschimbare
#elementele din vector trebuie sa fie toate diferite intre ele
#incepem de la addr 0x0000 mem date
#plasare numere sortate tot de la addr 0x000(pentru moment)
#primul prototip(se va mai testa pana merge)
#start:
#init:
MOV R0, 0x00 #ctr i=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x0A #nr elemente vector de interschimbat(primele 10)
MOV R4, 0x01 #ctr j=i+1(init)
MOV R5, 0x09 #L-1(limita for i)

#start_code_asm:
for_loop1:
CLZ #reset flags after each for,if,while
CLC
#insidefor1:
for_loop2:
CLZ
CLC
#insidefor2:
LDR R6, R1, R0  #R6= v[i]
LDR R7, R1, R4  #R7=v[j](v[i+1])
CMP R6,R7  #if a>b, flag z=0
JPZ out_of_if
CLZ CLC
#follows code inside if(interschimbare)
MOV R8, R6 #aux=v[i]
MOV R6, R7 #v[i]=v[j]
MOV R7, R8 #v[j]=aux
#stocare back in memory(change here if move elems in mem)
STR R6, R1, R0
STR R7, R1, R4
out_of_if:
NOP
CLZ CLC
#end_insidefor2
ADD R4, 0x01
CMP R4, R3
JNZ for_loop2
CLZ
CLC
#end_insidefor1
ADD R0, 0x01 #i++ (INC R0)
CMP R0,R5
JNZ for_loop1
CLZ CLC
HALT







----------------------------------------------
VER11: (28.03.2020) 
----------------------------------------------
#algo sortare interschimbare
#elementele din vector trebuie sa fie toate diferite intre ele
#incepem de la addr 0x0000 mem date
#plasare numere sortate tot de la addr 0x000(pentru moment)
#primul prototip(reparat , resetat j-ul in primul for)
#start:
#init:
MOV R0, 0x00 #ctr i=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x0A #nr elemente vector de interschimbat(primele 10)
MOV R4, 0x01 #ctr j=i+1(init)
MOV R5, 0x09 #L-1(limita for i)

#start_code_asm:
for_loop1:
MOV R4, R0  #reset j (i+1)
ADD R4, 0x01  #reset j (i+1)
CLZ #reset flags after each for,if,while
CLC
#insidefor1:
for_loop2:
CLZ
CLC
#insidefor2:
LDR R6, R1, R0  #R6= v[i]
LDR R7, R1, R4  #R7=v[j](v[i+1])
CMP R6,R7  #if a>b, flag z=0
JPZ out_of_if
CLZ CLC
#follows code inside if(interschimbare)
MOV R8, R6 #aux=v[i]
MOV R6, R7 #v[i]=v[j]
MOV R7, R8 #v[j]=aux
#stocare back in memory(change here if move elems in mem)
STR R6, R1, R0
STR R7, R1, R4
out_of_if:
NOP
CLZ CLC
#end_insidefor2
ADD R4, 0x01
CMP R4, R3
JNZ for_loop2
CLZ
CLC
#end_insidefor1
ADD R0, 0x01 #i++ (INC R0)
CMP R0,R5
JNZ for_loop1
CLZ CLC
HALT





----------------------------------------------
VER12: (28.03.2020) 
----------------------------------------------
#algo sortare interschimbare
#elementele din vector trebuie sa fie toate diferite intre ele
#incepem de la addr 0x0000 mem date
#plasare numere sortate tot de la addr 0x000(pentru moment)(altfel nu se poate)
#MERGE YEEA(reparat: , resetat j-ul in primul for, adaugat JNC pentru test mai mare(>) in test if)
#start:
#init:
MOV R0, 0x00 #ctr i=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x0A #nr elemente vector de interschimbat(primele 10)
MOV R4, 0x01 #ctr j=i+1(init)
MOV R5, 0x09 #L-1(limita for i)

#start_code_asm:
for_loop1:
MOV R4, R0  #reset j (i+1)
ADD R4, 0x01  #reset j (i+1)
CLZ #reset flags after each for,if,while
CLC
#insidefor1:
for_loop2:
CLZ
CLC
#insidefor2:
LDR R6, R1, R0  #R6= v[i]
LDR R7, R1, R4  #R7=v[j](v[i+1])
CMP R6,R7  #if a>b, flag z=0 si C=0
JPZ out_of_if #test z=1 =>out
JPC out_of_if #test c=1 =>out(ambele test pentru mai mare >)
CLZ 
CLC
#follows code inside if(interschimbare)
MOV R8, R6 #aux=v[i]
MOV R6, R7 #v[i]=v[j]
MOV R7, R8 #v[j]=aux
#stocare back in memory(change here if move elems in mem)
STR R6, R1, R0
STR R7, R1, R4
out_of_if:
NOP
CLZ 
CLC
#end_insidefor2
ADD R4, 0x01
CMP R4, R3
JNZ for_loop2
CLZ
CLC
#end_insidefor1
ADD R0, 0x01 #i++ (INC R0)
CMP R0,R5
JNZ for_loop1
CLZ 
CLC
HALT





----------------------------------------------
VER13: (28.03.2020) 
----------------------------------------------
#algo sortare interschimbare
#elementele din vector trebuie sa fie toate diferite intre ele
#incepem de la addr 0x0000 mem date
#plasare numere sortate tot de la addr 0x000(pentru moment)(altfel nu se poate)
#MERGE YEEA(reparat: , resetat j-ul in primul for, adaugat JNC pentru test mai mare(>) in test if)
#start:
#init:
MOV R0, 0x00 #ctr i=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x0A #nr elemente vector de interschimbat(primele 10)
MOV R4, 0x01 #ctr j=i+1(init)
MOV R5, 0x09 #L-1(limita for i)

#add algoritm copiere memorie date aici ca sa compari(copiere la addr 0x0080)(primele 10)
#usor ce a fost inainte cu ce e acum in mem(sa demo sa merge algo)

#start_code_asm:
for_loop1:
MOV R4, R0  #reset j (i+1)
ADD R4, 0x01  #reset j (i+1)
CLZ #reset flags after each for,if,while
CLC
#insidefor1:
for_loop2:
CLZ
CLC
#insidefor2:
LDR R6, R1, R0  #R6= v[i]
LDR R7, R1, R4  #R7=v[j](v[i+1])
CMP R6,R7  #if a>b, flag z=0 si C=0
JPZ out_of_if #test z=1 =>out
JPC out_of_if #test c=1 =>out(ambele test pentru mai mare >)
CLZ 
CLC
#follows code inside if(interschimbare)
MOV R8, R6 #aux=v[i]
MOV R6, R7 #v[i]=v[j]
MOV R7, R8 #v[j]=aux
#stocare back in memory(change here if move elems in mem)
STR R6, R1, R0
STR R7, R1, R4
out_of_if:
NOP
CLZ 
CLC
#end_insidefor2
ADD R4, 0x01
CMP R4, R3
JNZ for_loop2
CLZ
CLC
#end_insidefor1
ADD R0, 0x01 #i++ (INC R0)
CMP R0,R5
JNZ for_loop1
CLZ 
CLC
HALT









----------------------------------------------
VER14: (30.03.2020) 
----------------------------------------------
#algoritm sortare bubble sort
#elementele tre sa fie toate diferite
#incepem de la addr mem date 0x0000
#acest algo merge doar daca incep de la addr 
  mem date 0x0000(ca sa incep de la alta addr , trebuie mici schimbari)
#nu uita sa resetezi flagurile(CLZ,CLC,CLN)(ar trebui functie interna in Jumpuri pentru asta)
#start:
#init:
MOV R0, 0x00 #sortat=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x00 #ctr i=0
MOV R4, 0x00 #comparatie finala while(sortat==0)
MOV R5, 0x0A #nr max elemente de sortat
SUB R5, 0x01 #L-1 pt for(nivel de sus)
MOV R8, 0x01 #R8 e v[i+1]

#cod_asm_start:
#USE ALGO COPY DATA MEMORY HERE
#....

#cod_asm_bubble_sort:
JMP while_loop
content_loop1:
#insideWhile
MOV R0, 0x01 #sortat = 1
loop_for:
MOV R8, R3   #i+1 stocat in R8(reset)
ADD R8, 0x01 #i+1 stocat in R8(reset)
#insideFor
LDR R6, R1, R3  #get v[i]
LDR R7, R1, R8  #get v[i+1]
CMP R6, R7 #if a>b , flags z=0, c=0
JPZ out_of_if
JPC out_of_if
#code inside if 
#interschimbare
MOV R9, R6 #aux=v[i]
MOV R6, R7 #v[i] = v[i+1]
MOV R7, R9 #v[i+1] = aux
STR R6, R1, R3 
STR R7, R1, R8
#end_interschimbare
MOV R0, 0x00 #sortat = 0
out_of_if:
NOP
#end_insideFor
ADD R3, 0x01
CMP R3, R5
JNZ loop_for
#end_insideWhile
while_loop:
CMP R0, R4
JNZ content_loop1
HALT
#end_algorithm

 




----------------------------------------------
VER15: (30.03.2020) 
----------------------------------------------
#algoritm sortare bubble sort
#elementele tre sa fie toate diferite
#incepem de la addr mem date 0x0000
#acest algo merge doar daca incep de la addr 
  mem date 0x0000(ca sa incep de la alta addr , trebuie mici schimbari)
#nu uita sa resetezi flagurile(CLZ,CLC,CLN)(ar trebui functie interna in Jumpuri pentru asta)
#MERGE, YEEEA
#start:
#init:
MOV R0, 0x00 #sortat=0
MOV R1, 0x00 #high mem date addr
MOV R2, 0x00 #low mem date addr
MOV R3, 0x00 #ctr i=0
MOV R4, 0x00 #comparatie finala while(sortat==0)
MOV R5, 0x0A #nr max elemente de sortat
SUB R5, 0x01 #L-1 pt for(nivel de sus)
MOV R8, 0x01 #R8 e v[i+1]

#cod_asm_start:
#USE ALGO COPY DATA MEMORY HERE
#....

#cod_asm_bubble_sort:
JMP while_loop
content_loop1:
#insideWhile
CLZ
CLC
MOV R3, 0x00 #reset index i at each iteration
MOV R0, 0x01 #sortat = 1
loop_for:
CLZ
CLC
MOV R8, R3   #i+1 stocat in R8(reset)
ADD R8, 0x01 #i+1 stocat in R8(reset)
#insideFor
LDR R6, R1, R3  #get v[i]
LDR R7, R1, R8  #get v[i+1]
CMP R6, R7 #if a>b , flags z=0, c=0
JPZ out_of_if
JPC out_of_if
CLZ
CLC
#code inside if 
#interschimbare
MOV R9, R6 #aux=v[i]
MOV R6, R7 #v[i] = v[i+1]
MOV R7, R9 #v[i+1] = aux
STR R6, R1, R3 
STR R7, R1, R8
#end_interschimbare
MOV R0, 0x00 #sortat = 0
out_of_if:
CLZ
CLC
NOP
#end_insideFor
ADD R3, 0x01
CMP R3, R5
JNZ loop_for
CLZ
CLC
#end_insideWhile
while_loop:
CMP R0, R4
JPZ content_loop1
HALT
#end_algorithm





----------------------------------------------
VER16: (30.03.2020) 
----------------------------------------------
#algoritm auxiliar copiere memorie date in alta parte
#ex: copiere 10 elemente de la addr 0x0000 la addr 0x0080
#daca ai nevoie de acest algoritm , copiaza inainte de a declara ceilalti algoritmi
#PSEUDOCOD:
#v=[0,1,......,8,9,10]
#f=[] //vector final empty - f vector = 0x0080
#for(int i=0; i<=10; i++){
#    f[i] = v[i]
#}
#END_PSEUDOCOD
#implementare assembly:
#start:
#init:
MOV R0, 0x00 #ctr i=0
MOV R1, 0x00 #addr high mem date
MOV R2, 0x00 #addr low mem date Vector V(de unde se incepe copierea)
MOV R3, 0x80 #addr low mem date start Vector F(unde se vor pune datele)
MOV R4, 0x0A #cate elemente copiez

#start_asm_code_copy:
loop:
#insidefor:
LDR R5, R1, R2  #R5<-v[i]
ADD R2, 0x01
STR R5, R1, R3  #f[i](0x0080+)<- v[i]
ADD R3, 0x01 #index of f[i]++ 
CLZ #clear z just in case additions sets Z
#end_insidefor
ADD R0, 0x01
CMP R0, R4 #if a==b, flag z=1
JNZ loop
HALT
#end algo



 


















